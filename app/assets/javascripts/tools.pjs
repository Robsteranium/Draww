// Draww Tools

// Load tools into array for use in framework.pjs draw loop

int[] tool = new int[3];
tool[0] = new cropScale();
tool[1] = new vEllipse();
tool[2] = new vRect();
tool[3] = new alphaSelection();

// Base class

class draww_tool {
	void init() {
		
	}
	void draw() {
		
	}
	void mousePressed() {
		
	}
	void mouseDragged() {
		
	}
	void mouseReleased() {
		
	}
	void finalise() {
		canv_image = get();
	}
}

///////////////////////////////////////////////////////////
// Crop & Scale
///////////////////////////////////////////////////////////

class cropScale extends draww_tool {
	
	// Declare class global variables 
	int iiw, iih, iix, iiy, ssiw, siih, srox, sroy, srx, sry, 
	action_state, bdifx, bdify, prev_iix, prev_iiy, prev_srx, prev_sry, rc;
	float s_dist, s_angle, angle_offset;
	boolean locked, prev_show_controls;
	color t_white = color(255,255,255,150);
	
	void init() {
		// Initial width and height + x/y of image
		iiw = init_size_x;
		iih = (imported_image.height / imported_image.width) * init_size_x;
		iix = 0;
		iiy = 0;

		// Scale & Rotate Control
		srox = iix+(iiw/2); // Origin
		sroy = iiy+(iih/2);
		srx = 100; // Control pos
		sry = -100;
		angle_offset = atan(srx/sry);

		// Action state (0 - none, 1 - over image, 2 - over scale handle, 3 - over rotate handle)
		action_state = 0;

		// Are we dragging?
		locked = false;

		// What was the offset of the mouse when the drag started?
		bdifx = 0;
		bdify = 0;

		// Previous values (to halt draw if no change)
		rc = 0;
	}
	
	void draw() {

		// Calculate
		srox = iix+(iiw/2); // Calculate origin for center point
		sroy = iiy+(iih/2);

		s_dist = sqrt( (srx*srx) + (sry*sry) ); // distance of control from center
		angle = atan(srx/sry);

		siiw = iiw/140*s_dist; // calculate scaled width and height
		siih = iih/140*s_dist;
		
		// debug
		// fill(0,0,0);
		// rect(0,0,600,50);
		// fill(255,255,255);
		// text("mx"+mouseX+" my"+mouseY+" state"+action_state+" lock "+locked+" dist"+s_dist+" angle"+angle+" rc"+rc, 30,30);

		// Check for activity (only redraw if there is some)
		if (iix != prev_iix || iiy != prev_iiy || srx != prev_srx || sry != prev_sry || show_controls != prev_show_controls ) {
			rc = rc+1;

			// Clear screen
			background(bg_colour);

			// Draw Image
			imageMode(CENTER);
			translate(srox,sroy);
			rotate(-angle+angle_offset);
			image(
				imported_image,
				0,
				0,
				siiw,
				siih
			);
			rotate(angle-angle_offset);
			translate(-srox,-sroy);
			imageMode(CORNER);

			if(show_controls) {
				// Draw scale and rotate control
				fill(t_white);
				noStroke();
				ellipse(srox, sroy, 40, 40); // Draw center point
				ellipse(srox+srx, sroy+sry, 40, 40); // Draw control
				stroke(t_white);
				strokeWeight(8);
				line(srox, sroy, srox+srx, sroy+sry); // Draw guide line
				strokeWeight(1);
				noFill();
				ellipse(srox, sroy, s_dist*2, s_dist*2); // Guide circle
			}
		}

		// Check action state
		if(locked == false) {
			action_state = 0;
			if(mouseX > iix && mouseX < iix+iiw && mouseY > iiy && mouseY < iiy+iih) {
				action_state = 1; // over imported image
			}
			if(mouseX > srox+srx-20 && mouseX < srox+srx+20 && mouseY > sroy+sry-20 && mouseY < sroy+sry+20) {
				action_state = 2; // over control
			}
		}

		// Populate vars for activity checking
		prev_iix = iix;
		prev_iiy = iiy;
		prev_srx = srx;
		prev_sry = sry;
		prev_show_controls = show_controls;
	}
	
	
	//////////////////////////////////////////////////////////////////////////

	void mousePressed() {
		if (action_state == 0) { // Don't click there dick'ed.
			locked = false;
		}
	    if (action_state == 1) { // Mouse pressed over imported image
	        locked = true;
		    // Get offsets
			bdifx = mouseX-iix;
		    bdify = mouseY-iiy;
	    }
	    if (action_state == 2) { // Mouse pressed over control
	        locked = true;
		    // Get offsets
			bdifx = mouseX-srx;
		    bdify = mouseY-sry;
	    }
	}

	void mouseDragged() {
		if(action_state == 1) { // Move the imported image
			iix = mouseX-bdifx;
			iiy = mouseY-bdify;
		}
		if(action_state == 2) { // Move control
			srx = mouseX-bdifx;
			sry = mouseY-bdify;
		}
	}

	void mouseReleased() {
	    locked = false;
	}
}

///////////////////////////////////////////////////////////
// Variable Ellipse
///////////////////////////////////////////////////////////

class vEllipse extends draww_tool {
	void init() {
		fill(255,0,0);
	}
	void draw() {
		if(mousePressed) {
			variableEllipse(mouseX, mouseY, pmouseX, pmouseY);  
		}
	}
	void variableEllipse(int x, int y, int px, int py)   
	{  
	  float speed = min(abs(x-px) + abs(y-py) , 60);  
	  stroke(speed);  
	  ellipse(x, y, speed, speed);  
	}
}

///////////////////////////////////////////////////////////
// Variable Rectangle
///////////////////////////////////////////////////////////

class vRect extends draww_tool {
	void init() {
		fill(0,255,0);
	}
	void draw() {
		if(mousePressed) {
			rect(mouseX, mouseY, 20, 20);
		}
	}
}


///////////////////////////////////////////////////////////
// Make Selection Colour Transparent
///////////////////////////////////////////////////////////

class alphaSelection extends draww_tool {
	float tolerance = 0.1;
	void init() {
	}
	void draw() {
		if(mousePressed) {
		        int target_colour = -canv_image.get(mouseX, mouseY);
			for (int x = 0; x < canv_image.width; x++) {
				for (int y = 0; y < canv_image.height; y++) {
					int cell_colour = -canv_image.get(x,y);
					if(cell_colour > (target_colour * (1 - tolerance)) && cell_colour < (target_colour * (1 + tolerance)) ) {
						canv_image.set(x,y, color(255,255,255,255));
					}
				}
			}
			image(canv_image, 0, 0);
		}
	}
}


